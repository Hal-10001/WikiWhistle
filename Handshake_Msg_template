<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visitor IP Retrieval Demo</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom font */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f7f7f7;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
    </style>
</head>
<body>
    <div id="app" class="w-full max-w-lg p-6 md:p-10 bg-white shadow-xl rounded-xl border border-gray-200">
        <h1 class="text-3xl font-extrabold text-indigo-700 mb-6 text-center">Visitor IP Capture Demo</h1>
        <p class="text-gray-600 mb-8 text-center">
            This script retrieves the visitor's public IP and location data directly from their browser.
            The data is shown below and a function for *secure logging* is demonstrated in the console.
        </p>

        <div id="ip-info" class="space-y-3 p-6 bg-gray-50 rounded-lg border border-gray-200">
            <p class="text-lg font-semibold text-gray-800">Retrieving Information...</p>
        </div>

        <div id="logging-status" class="mt-8 p-4 bg-yellow-100 text-yellow-800 border-l-4 border-yellow-500 rounded-md">
            <p class="font-medium">Logging Status:</p>
            <p id="status-message" class="text-sm">Attempting to simulate data logging to console...</p>
        </div>
    </div>

    <script type="module">
        // --- Firebase/Firestore Imports ---
        // NOTE: Since actual IP logging for storage is a server-side/backend operation,
        // this section shows where the Firebase/Firestore initialization would occur.
        // We are using a simplified, direct fetch of the IP below for demonstration.
        
        // import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        // import { getFirestore, collection, addDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // const appId = typeof __app_id !== 'undefined' ? __app_id : 'ip-capture-demo';
        // const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        // const app = Object.keys(firebaseConfig).length ? initializeApp(firebaseConfig) : null;
        // const db = app ? getFirestore(app) : null;
        
        const ipInfoDiv = document.getElementById('ip-info');
        const statusMessage = document.getElementById('status-message');

        /**
         * Placeholder for a real logging function that would send data to Firestore.
         * For security and ethical reasons, actual IP logging must be done with
         * explicit user consent and proper backend infrastructure.
         * * @param {Object} data The IP data object to log.
         */
        async function logVisitorIPToFirestore(data) {
            console.log("--- SIMULATED IP LOGGING ---");
            console.log("Simulating logging this data to a 'visitors' collection in Firestore:", data);
            
            // --- ACTUAL FIRESTORE LOGIC WOULD GO HERE ---
            /*
            if (!db) {
                console.error("Firestore not initialized. Cannot log IP.");
                statusMessage.textContent = "Error: Firestore not initialized. Data not logged.";
                return;
            }
            
            try {
                const docRef = await addDoc(collection(db, `artifacts/${appId}/public/data/visitors`), {
                    ip: data.ip,
                    city: data.city,
                    country: data.country_name,
                    timestamp: new Date()
                });
                console.log("Document written with ID: ", docRef.id);
                statusMessage.textContent = `IP logged successfully (ID: ${docRef.id}).`;
            } catch (e) {
                console.error("Error adding document: ", e);
                statusMessage.textContent = "Error: Failed to log IP to Firestore. Check console.";
            }
            */

            // --- Console Simulation ---
            if (data.ip) {
                statusMessage.innerHTML = `IP logging simulated successfully. IP: <code class="bg-yellow-200 px-1 rounded">${data.ip}</code> (Check console for full log object).`;
            } else {
                statusMessage.textContent = "IP logging simulated. No IP found to log.";
            }
        }


        // --- Main IP Retrieval Logic ---
        async function getVisitorIP() {
            try {
                // Using a public, no-auth required API to get the user's IP and location
                const response = await fetch('https://ipapi.co/json/');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();

                // Display the retrieved data
                ipInfoDiv.innerHTML = `
                    <p class="font-bold text-lg text-indigo-600">IP Address: <span class="text-gray-900">${data.ip || 'N/A'}</span></p>
                    <hr class="my-2 border-gray-300">
                    <p><strong>City:</strong> ${data.city || 'N/A'}</p>
                    <p><strong>Region:</strong> ${data.region || 'N/A'}</p>
                    <p><strong>Country:</strong> ${data.country_name || 'N/A'}</p>
                    <p><strong>Organization:</strong> ${data.org || 'N/A'}</p>
                    <p class="text-xs text-gray-500 mt-3">Data retrieved from ipapi.co</p>
                `;
                
                // Trigger the logging function with the retrieved data
                logVisitorIPToFirestore(data);

            } catch (error) {
                console.error('Failed to fetch IP information:', error);
                ipInfoDiv.innerHTML = `
                    <p class="text-red-600 font-semibold">Error retrieving IP address.</p>
                    <p class="text-sm text-gray-500 mt-2">Check console for details. IP lookup requires external service access.</p>
                `;
                statusMessage.textContent = "Error: Failed to retrieve IP for logging.";
            }
        }

        window.onload = getVisitorIP;

    </script>
</body>
</html>
